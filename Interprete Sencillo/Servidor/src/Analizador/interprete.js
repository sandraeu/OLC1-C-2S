/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var interprete = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,12],$V2=[1,13],$V3=[1,20],$V4=[1,21],$V5=[1,22],$V6=[1,23],$V7=[1,24],$V8=[1,15],$V9=[1,16],$Va=[1,17],$Vb=[1,19],$Vc=[1,18],$Vd=[5,12,16,19,24,25,26,27,28,30,33,35,37,38,41,45,47],$Ve=[1,47],$Vf=[1,44],$Vg=[1,43],$Vh=[1,42],$Vi=[1,45],$Vj=[1,46],$Vk=[1,48],$Vl=[1,49],$Vm=[1,50],$Vn=[1,51],$Vo=[13,22,29],$Vp=[1,63],$Vq=[1,64],$Vr=[1,65],$Vs=[1,66],$Vt=[1,67],$Vu=[1,68],$Vv=[1,69],$Vw=[1,70],$Vx=[1,71],$Vy=[1,72],$Vz=[1,73],$VA=[1,74],$VB=[1,75],$VC=[1,76],$VD=[1,77],$VE=[13,32,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,69],$VF=[13,32,46,60,61,69],$VG=[13,32,46,48,49,54,55,56,57,58,59,60,61,69],$VH=[13,32,46,48,49,50,51,54,55,56,57,58,59,60,61,69],$VI=[13,32,46,48,49,50,51,52,54,55,56,57,58,59,60,61,69],$VJ=[13,32,46,54,55,56,57,58,59,60,61,69],$VK=[1,123],$VL=[1,122],$VM=[35,45,47];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"writeline":8,"asignacion":9,"sent_if":10,"sent_while":11,"BREAK":12,"PYC":13,"sent_switch":14,"sent_for":15,"ID":16,"DECRE":17,"INCRE":18,"CONTINUE":19,"tipo":20,"lista_ids":21,"IGUAL":22,"e":23,"INT":24,"DOUBLE":25,"STRING":26,"CHAR":27,"BOOLEAN":28,"COMA":29,"WRITELINE":30,"PARA":31,"PARC":32,"IF":33,"LLAVA":34,"LLAVC":35,"ELSE":36,"WHILE":37,"FOR":38,"dec_asig_for":39,"actualizacion_for":40,"SWITCH":41,"caselist":42,"default":43,"caso":44,"CASE":45,"DSPNTS":46,"DEFAULT":47,"MAS":48,"MENOS":49,"MULTI":50,"DIV":51,"POT":52,"MOD":53,"MAYORIGUAL":54,"MAYORQUE":55,"MENORIGUAL":56,"MENORQUE":57,"IGUALIGUAL":58,"DIFERENTE":59,"AND":60,"OR":61,"NOT":62,"DECIMAL":63,"ENTERO":64,"CADENA":65,"CARACTER":66,"TRUE":67,"FALSE":68,"INTERROGACION":69,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"BREAK",13:"PYC",16:"ID",17:"DECRE",18:"INCRE",19:"CONTINUE",22:"IGUAL",24:"INT",25:"DOUBLE",26:"STRING",27:"CHAR",28:"BOOLEAN",29:"COMA",30:"WRITELINE",31:"PARA",32:"PARC",33:"IF",34:"LLAVA",35:"LLAVC",36:"ELSE",37:"WHILE",38:"FOR",41:"SWITCH",45:"CASE",46:"DSPNTS",47:"DEFAULT",48:"MAS",49:"MENOS",50:"MULTI",51:"DIV",52:"POT",53:"MOD",54:"MAYORIGUAL",55:"MAYORQUE",56:"MENORIGUAL",57:"MENORQUE",58:"IGUALIGUAL",59:"DIFERENTE",60:"AND",61:"OR",62:"NOT",63:"DECIMAL",64:"ENTERO",65:"CADENA",66:"CARACTER",67:"TRUE",68:"FALSE",69:"INTERROGACION"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,3],[6,3],[6,2],[7,5],[7,3],[20,1],[20,1],[20,1],[20,1],[20,1],[21,3],[21,1],[8,5],[9,4],[10,7],[10,11],[10,9],[11,7],[15,11],[39,4],[39,3],[40,2],[40,2],[40,3],[14,7],[14,8],[14,7],[42,2],[42,1],[44,4],[43,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,2],[23,3],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,5],[23,2],[23,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = new ast.default($$[$0-1]); return this.$ 
break;
case 2: case 39:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: case 23: case 40:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 4:
 this.$ =  $$[$0]; 
break;
case 5: case 6: case 7: case 8: case 10: case 11:
 this.$ = $$[$0]; 
break;
case 9:
 this.$ = new detener.default(); 
break;
case 12:
 this.$ = new asignacion.default($$[$0-2], new aritmetica.default(new identificador.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].last_column), '-', new primitivo.default(1, 'ENTERO', _$[$0-2].first_line, _$[$0-2].last_column), _$[$0-2].first_line, _$[$0-2].last_column, false),_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 13:
 this.$ = new asignacion.default($$[$0-2], new aritmetica.default(new identificador.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].last_column), '+', new primitivo.default(1, 'ENTERO', _$[$0-2].first_line, _$[$0-2].last_column), _$[$0-2].first_line, _$[$0-2].last_column, false),_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 14:
 this.$ = new continuar.default(); 
break;
case 15:
 this.$ = new declaracion.default($$[$0-4], $$[$0-3], $$[$0-1],  _$[$0-4].first_line, _$[$0-4].last_column);
break;
case 16:
 this.$ = new declaracion.default($$[$0-2], $$[$0-1], null,  _$[$0-2].first_line, _$[$0-2].last_column);
break;
case 17:
this.$ = new tipo.default("ENTERO"); 
break;
case 18:
this.$ = new tipo.default("DOBLE"); 
break;
case 19:
this.$ = new tipo.default("CADENA"); 
break;
case 20:
this.$ = new tipo.default("CARACTER"); 
break;
case 21:
this.$ = new tipo.default("BOOLEANO"); 
break;
case 22:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 24:
 this.$ = new writeline.default($$[$0-2], _$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 25:
 this.$ = new asignacion.default($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 26:
 this.$ = new Ifs.default($$[$0-4], $$[$0-1], [], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 27:
 this.$ = new Ifs.default($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10].first_line, _$[$0-10].last_column); 
break;
case 28:
 this.$ = new Ifs.default($$[$0-6], $$[$0-3], [$$[$0]], _$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 29:
 this.$ = new While.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column);  
break;
case 30:
 this.$ = new For.default($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].last_column); 
break;
case 31:
 this.$ = new declaracion.default($$[$0-3], $$[$0-2], $$[$0],  _$[$0-3].first_line, _$[$0-3].last_column);
break;
case 32: case 35:
 this.$ = new asignacion.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 33:
 this.$ = new asignacion.default($$[$0-1], new aritmetica.default(new identificador.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), '-', new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false),_$[$0-1].first_line, _$[$0-1].last_column ); 
break;
case 34:
 this.$ = new asignacion.default($$[$0-1], new aritmetica.default(new identificador.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), '+', new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false),_$[$0-1].first_line, _$[$0-1].last_column ); 
break;
case 36:
 this.$ = new Switch.default($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 37:
 this.$ = new Switch.default($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 38:
 this.$ = new Switch.default($$[$0-4], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 41:
 this.$ = new caso.default($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 42:
 this.$ = new caso.default(null, $$[$0], _$[$0-2].first_line, _$[$0-2].last_column);
break;
case 43:
 this.$ = new aritmetica.default($$[$0-2], '+', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 44:
 this.$ = new aritmetica.default($$[$0-2], '-', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 45:
 this.$ = new aritmetica.default($$[$0-2], '*', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 46:
 this.$ = new aritmetica.default($$[$0-2], '/', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 47:
 this.$ = new aritmetica.default($$[$0-2], '^', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 48:
 this.$ = new aritmetica.default($$[$0-2], '%', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 49:
 this.$ = new relacional.default($$[$0-2], '>=', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 50:
 this.$ = new relacional.default($$[$0-2], '>', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 51:
 this.$ = new relacional.default($$[$0-2], '<=', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 52:
 this.$ = new relacional.default($$[$0-2], '<', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 53:
 this.$ = new relacional.default($$[$0-2], '==', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 54:
 this.$ = new relacional.default($$[$0-2], '!=', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 55:
 this.$ = new logica.default($$[$0-2], '&&', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 56:
 this.$ = new logica.default($$[$0-2], '||', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 57:
 this.$ = new logica.default($$[$0], '!', null, _$[$0-1].first_line, _$[$0-1].last_column,true); 
break;
case 58:
 this.$ = new aritmetica.default($$[$0], 'UNARIO', null, _$[$0-1].first_line, _$[$0-1].last_column,true); 
break;
case 59:
 this.$ = $$[$0-1]; 
break;
case 60:
 this.$ = new primitivo.default(Number($$[$0]), 'DOBLE', _$[$0].first_line, _$[$0].last_column); 
break;
case 61:
 this.$ = new primitivo.default(Number($$[$0]), 'ENTERO', _$[$0].first_line, _$[$0].last_column); 
break;
case 62:
 this.$ = new identificador.default($$[$0], _$[$0].first_line, _$[$0].last_column); 
break;
case 63:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], 'CADENA', _$[$0].first_line, _$[$0].last_column); 
break;
case 64:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], 'CARACTER', _$[$0].first_line, _$[$0].last_column); 
break;
case 65:
 this.$ = new primitivo.default(true, 'BOOLEANO', _$[$0].first_line, _$[$0].last_column); 
break;
case 66:
 this.$ = new primitivo.default(false, 'BOOLEANO', _$[$0].first_line, _$[$0].last_column); 
break;
case 67:
 this.$ = new ternario.default($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 68:
 this.$ = new aritmetica.default(new identificador.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), '+', new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false); 
break;
case 69:
 this.$ = new aritmetica.default(new identificador.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), '-', new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,30:$V8,33:$V9,37:$Va,38:$Vb,41:$Vc},{1:[3]},{5:[1,25],6:26,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,30:$V8,33:$V9,37:$Va,38:$Vb,41:$Vc},o($Vd,[2,3]),o($Vd,[2,4]),o($Vd,[2,5]),o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),{13:[1,27]},o($Vd,[2,10]),o($Vd,[2,11]),{17:[1,28],18:[1,29],22:[1,30]},{13:[1,31]},{16:[1,33],21:32},{31:[1,34]},{31:[1,35]},{31:[1,36]},{31:[1,37]},{31:[1,38]},{16:[2,17]},{16:[2,18]},{16:[2,19]},{16:[2,20]},{16:[2,21]},{1:[2,1]},o($Vd,[2,2]),o($Vd,[2,9]),{13:[1,39]},{13:[1,40]},{16:$Ve,23:41,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},o($Vd,[2,14]),{13:[1,53],22:[1,52],29:[1,54]},o($Vo,[2,23]),{16:$Ve,23:55,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,23:56,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,23:57,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,23:58,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:[1,61],20:60,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,39:59},o($Vd,[2,12]),o($Vd,[2,13]),{13:[1,62],48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,69:$VD},{16:$Ve,23:78,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,23:79,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,23:80,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},o($VE,[2,60]),o($VE,[2,61]),o($VE,[2,62],{17:[1,82],18:[1,81]}),o($VE,[2,63]),o($VE,[2,64]),o($VE,[2,65]),o($VE,[2,66]),{16:$Ve,23:83,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},o($Vd,[2,16]),{16:[1,84]},{32:[1,85],48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,69:$VD},{32:[1,86],48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,69:$VD},{32:[1,87],48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,69:$VD},{32:[1,88],48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,69:$VD},{13:[1,89]},{16:[1,90]},{22:[1,91]},o($Vd,[2,25]),{16:$Ve,23:92,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,23:93,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,23:94,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,23:95,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,23:96,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,23:97,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,23:98,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,23:99,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,23:100,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,23:101,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,23:102,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,23:103,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,23:104,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,23:105,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,23:106,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},o($VF,[2,57],{48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA}),o($VE,[2,58]),{32:[1,107],48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,69:$VD},o($VE,[2,68]),o($VE,[2,69]),{13:[1,108],48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,69:$VD},o($Vo,[2,22]),{13:[1,109]},{34:[1,110]},{34:[1,111]},{34:[1,112]},{16:$Ve,23:113,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{22:[1,114]},{16:$Ve,23:115,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},o($VG,[2,43],{50:$Vr,51:$Vs,52:$Vt,53:$Vu}),o($VG,[2,44],{50:$Vr,51:$Vs,52:$Vt,53:$Vu}),o($VH,[2,45],{52:$Vt,53:$Vu}),o($VH,[2,46],{52:$Vt,53:$Vu}),o($VI,[2,47],{53:$Vu}),o($VI,[2,48],{53:$Vu}),o($VJ,[2,49],{48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu}),o($VJ,[2,50],{48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu}),o($VJ,[2,51],{48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu}),o($VJ,[2,52],{48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu}),o($VJ,[2,53],{48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu}),o($VJ,[2,54],{48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu}),o($VF,[2,55],{48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA}),o([13,32,46,61,69],[2,56],{48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB}),{46:[1,116],48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,69:$VD},o($VE,[2,59]),o($Vd,[2,15]),o($Vd,[2,24]),{4:117,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,30:$V8,33:$V9,37:$Va,38:$Vb,41:$Vc},{4:118,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,30:$V8,33:$V9,37:$Va,38:$Vb,41:$Vc},{42:119,43:120,44:121,45:$VK,47:$VL},{13:[1,124],48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,69:$VD},{16:$Ve,23:125,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{13:[2,32],48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,69:$VD},{16:$Ve,23:126,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{6:26,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,30:$V8,33:$V9,35:[1,127],37:$Va,38:$Vb,41:$Vc},{6:26,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,30:$V8,33:$V9,35:[1,128],37:$Va,38:$Vb,41:$Vc},{35:[1,129],43:130,44:131,45:$VK,47:$VL},{35:[1,132]},o($VM,[2,40]),{46:[1,133]},{16:$Ve,23:134,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:[1,136],40:135},{13:[2,31],48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,69:$VD},o([13,32,46],[2,67],{48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,69:$VD}),o($Vd,[2,26],{36:[1,137]}),o($Vd,[2,29]),o($Vd,[2,36]),{35:[1,138]},o($VM,[2,39]),o($Vd,[2,38]),{4:139,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,30:$V8,33:$V9,37:$Va,38:$Vb,41:$Vc},{46:[1,140],48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,69:$VD},{32:[1,141]},{17:[1,142],18:[1,143],22:[1,144]},{10:146,33:$V9,34:[1,145]},o($Vd,[2,37]),{6:26,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,30:$V8,33:$V9,35:[2,42],37:$Va,38:$Vb,41:$Vc},{4:147,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,30:$V8,33:$V9,37:$Va,38:$Vb,41:$Vc},{34:[1,148]},{32:[2,33]},{32:[2,34]},{16:$Ve,23:149,31:$Vf,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{4:150,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,30:$V8,33:$V9,37:$Va,38:$Vb,41:$Vc},o($Vd,[2,28]),o($VM,[2,41],{7:4,8:5,9:6,10:7,11:8,14:10,15:11,20:14,6:26,12:$V0,16:$V1,19:$V2,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,30:$V8,33:$V9,37:$Va,38:$Vb,41:$Vc}),{4:151,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,30:$V8,33:$V9,37:$Va,38:$Vb,41:$Vc},{32:[2,35],48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,69:$VD},{6:26,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,30:$V8,33:$V9,35:[1,152],37:$Va,38:$Vb,41:$Vc},{6:26,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,30:$V8,33:$V9,35:[1,153],37:$Va,38:$Vb,41:$Vc},o($Vd,[2,27]),o($Vd,[2,30])],
defaultActions: {20:[2,17],21:[2,18],22:[2,19],23:[2,20],24:[2,21],25:[2,1],142:[2,33],143:[2,34]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const evaluar = require('../Interprete/Evaluar');
    const aritmetica = require('../Interprete/Expresiones/Operaciones/Aritmetica');
    const primitivo = require('../Interprete/Expresiones/Primitivo');

    const writeline = require('../Interprete/Instrucciones/WriteLine')
    const declaracion = require('../Interprete/Instrucciones/Declaracion')
    const ast = require('../Interprete/Ast/Ast')
    const tipo = require('../Interprete/TablaSimbolos/Tipo')
    const identificador = require('../Interprete/Expresiones/Identificador')

    const relacional = require('../Interprete/Expresiones/Operaciones/Relacional');
    const logica = require('../Interprete/Expresiones/Operaciones/Logica');

    const asignacion = require('../Interprete/Instrucciones/Asignacion');
    const Ifs = require('../Interprete/Instrucciones/SentenciasControl/Ifs');
    const While = require('../Interprete/Instrucciones/SentenciasCiclica/While');
    const ternario = require('../Interprete/Expresiones/Ternario');
    const detener = require('../Interprete/Instrucciones/SentenciasTransferencia/Break');

    const Switch = require('../Interprete/Instrucciones/SentenciasControl/Switch');
    const caso = require('../Interprete/Instrucciones/SentenciasControl/Caso'); 
    const For = require('../Interprete/Instrucciones/SentenciasCiclica/For');

    const continuar = require('../Interprete/Instrucciones/SentenciasTransferencia/Continue');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Ignoramos los comentarios simples*/
break;
case 1:/*Ignorar comentarios con multiples lneas*/
break;
case 2: console.log("Reconocio : " + yy_.yytext);  return 17 
break;
case 3: console.log("Reconocio : " + yy_.yytext);  return 18 
break;
case 4: console.log("Reconocio : " + yy_.yytext);  return 58 
break;
case 5: console.log("Reconocio : " + yy_.yytext);  return 52 
break;
case 6: console.log("Reconocio : " + yy_.yytext);  return 62 
break;
case 7: console.log("Reconocio : " + yy_.yytext);  return 53 
break;
case 8: console.log("Reconocio : " + yy_.yytext);  return 31 
break;
case 9: console.log("Reconocio : " + yy_.yytext);  return 32 
break;
case 10: console.log("Reconocio : " + yy_.yytext);  return 'CORA' 
break;
case 11: console.log("Reconocio : " + yy_.yytext);  return 'CORC' 
break;
case 12: console.log("Reconocio : " + yy_.yytext);  return 13 
break;
case 13: console.log("Reconocio : " + yy_.yytext);  return 22 
break;
case 14: console.log("Reconocio : " + yy_.yytext);  return 29 
break;
case 15: console.log("Reconocio : "+ yy_.yytext); return 34
break;
case 16: console.log("Reconocio : "+ yy_.yytext); return 35
break;
case 17: console.log("Reconocio : "+ yy_.yytext); return 69
break;
case 18: console.log("Reconocio : "+ yy_.yytext); return 46
break;
case 19: console.log("Reconocio : " + yy_.yytext);  return 48 
break;
case 20: console.log("Reconocio : " + yy_.yytext);  return 50 
break;
case 21: console.log("Reconocio : " + yy_.yytext);  return 51 
break;
case 22: console.log("Reconocio : " + yy_.yytext);  return 49 
break;
case 23: console.log("Reconocio : " + yy_.yytext);  return 53 
break;
case 24: console.log("Reconocio : " + yy_.yytext);  return 52 
break;
case 25: console.log("Reconocio : " + yy_.yytext);  return 54 
break;
case 26: console.log("Reconocio : " + yy_.yytext);  return 55 
break;
case 27: console.log("Reconocio : " + yy_.yytext);  return 56 
break;
case 28: console.log("Reconocio : " + yy_.yytext);  return 57 
break;
case 29: console.log("Reconocio : " + yy_.yytext);  return 59 
break;
case 30: console.log("Reconocio : " + yy_.yytext);  return 60 
break;
case 31: console.log("Reconocio : " + yy_.yytext);  return 61 
break;
case 32: console.log("Reconocio : " + yy_.yytext);  return 62 
break;
case 33: console.log("Reconocio : " + yy_.yytext);  return 'EVALUAR' 
break;
case 34: console.log("Reconocio : " + yy_.yytext);  return 67 
break;
case 35: console.log("Reconocio : " + yy_.yytext);  return 68 
break;
case 36: console.log("Reconocio : " + yy_.yytext);  return 24 
break;
case 37: console.log("Reconocio : " + yy_.yytext);  return 25 
break;
case 38: console.log("Reconocio : " + yy_.yytext);  return 26 
break;
case 39: console.log("Reconocio : " + yy_.yytext);  return 27 
break;
case 40: console.log("Reconocio : " + yy_.yytext);  return 28 
break;
case 41: console.log("Reconocio : " + yy_.yytext);  return 30 
break;
case 42: console.log("Reconocio : "+ yy_.yytext); return 33
break;
case 43: console.log("Reconocio : "+ yy_.yytext); return 37
break;
case 44: console.log("Reconocio : "+ yy_.yytext); return 36
break;
case 45: console.log("Reconocio : "+ yy_.yytext); return 12
break;
case 46: console.log("Reconocio : "+ yy_.yytext); return 38
break;
case 47: console.log("Reconocio : "+ yy_.yytext); return 41
break;
case 48: console.log("Reconocio : "+ yy_.yytext); return 45
break;
case 49: console.log("Reconocio : "+ yy_.yytext); return 'TOSTRING'
break;
case 50: console.log("Reconocio : "+ yy_.yytext); return 'TOUPPER'
break;
case 51: console.log("Reconocio : "+ yy_.yytext); return 47
break;
case 52: console.log("Reconocio : "+ yy_.yytext); return 19
break;
case 53: console.log("Reconocio : " + yy_.yytext);  return 63 
break;
case 54: console.log("Reconocio : " + yy_.yytext);  return 64 
break;
case 55: console.log("Reconocio : " + yy_.yytext);  return 16 
break;
case 56: console.log("Reconocio : " + yy_.yytext);  return 65 
break;
case 57: console.log("Reconocio : " + yy_.yytext);  return 66 
break;
case 58:/* Espacios se ignoran */
break;
case 59:return 5
break;
case 60:return 'ERROR'
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/i,/^(?:--)/i,/^(?:\+\+)/i,/^(?:==)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:=)/i,/^(?:,)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\?)/i,/^(?::)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:evaluar\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:writeline\b)/i,/^(?:if\b)/i,/^(?:while\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:tostring\b)/i,/^(?:toupper\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:([0-9]+))/i,/^(?:([a-zñA-ZÑ][a-zñA-ZÑ0-9_]*))/i,/^(?:(("((\\([\'\"\\ntr]))|([^\"\\]))*")))/i,/^(?:(('((\\([\'\"\\ntr]))|([^\'\\]))')))/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = interprete;
exports.Parser = interprete.Parser;
exports.parse = function () { return interprete.parse.apply(interprete, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}