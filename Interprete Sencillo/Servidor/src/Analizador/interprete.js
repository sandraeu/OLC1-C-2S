/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var interprete = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,12],$V2=[1,13],$V3=[1,16],$V4=[1,24],$V5=[1,25],$V6=[1,26],$V7=[1,27],$V8=[1,28],$V9=[1,18],$Va=[1,19],$Vb=[1,20],$Vc=[1,22],$Vd=[1,21],$Ve=[1,23],$Vf=[5,12,16,19,22,27,28,29,30,31,33,36,38,40,41,44,48,50,52],$Vg=[1,35],$Vh=[1,45],$Vi=[1,42],$Vj=[1,41],$Vk=[1,40],$Vl=[1,43],$Vm=[1,44],$Vn=[1,46],$Vo=[1,47],$Vp=[1,48],$Vq=[1,49],$Vr=[1,66],$Vs=[1,67],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[1,71],$Vx=[1,72],$Vy=[1,73],$Vz=[1,74],$VA=[1,75],$VB=[1,76],$VC=[1,77],$VD=[1,78],$VE=[1,79],$VF=[1,80],$VG=[13,32,35,49,57,58,59,60,61,62,63,64,65,66,67,68,69,70,78],$VH=[13,26,32],$VI=[32,35],$VJ=[13,32,35,49,69,70,78],$VK=[13,32,35,49,57,58,63,64,65,66,67,68,69,70,78],$VL=[13,32,35,49,57,58,59,60,63,64,65,66,67,68,69,70,78],$VM=[13,32,35,49,57,58,59,60,61,63,64,65,66,67,68,69,70,78],$VN=[13,32,35,49,63,64,65,66,67,68,69,70,78],$VO=[1,135],$VP=[1,157],$VQ=[1,156],$VR=[38,48,50];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"writeline":8,"asignacion":9,"sent_if":10,"sent_while":11,"BREAK":12,"PYC":13,"sent_switch":14,"sent_for":15,"ID":16,"DECRE":17,"INCRE":18,"CONTINUE":19,"funciones":20,"llamada":21,"RETURN":22,"e":23,"tipo":24,"lista_ids":25,"IGUAL":26,"INT":27,"DOUBLE":28,"STRING":29,"CHAR":30,"BOOLEAN":31,"COMA":32,"WRITELINE":33,"PARA":34,"PARC":35,"IF":36,"LLAVA":37,"LLAVC":38,"ELSE":39,"WHILE":40,"FOR":41,"dec_asig_for":42,"actualizacion_for":43,"SWITCH":44,"caselist":45,"default":46,"caso":47,"CASE":48,"DSPNTS":49,"DEFAULT":50,"lista_params":51,"VOID":52,"lista_vals":53,"startwith":54,"START":55,"WITH":56,"MAS":57,"MENOS":58,"MULTI":59,"DIV":60,"POT":61,"MOD":62,"MAYORIGUAL":63,"MAYORQUE":64,"MENORIGUAL":65,"MENORQUE":66,"IGUALIGUAL":67,"DIFERENTE":68,"AND":69,"OR":70,"NOT":71,"DECIMAL":72,"ENTERO":73,"CADENA":74,"CARACTER":75,"TRUE":76,"FALSE":77,"INTERROGACION":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"BREAK",13:"PYC",16:"ID",17:"DECRE",18:"INCRE",19:"CONTINUE",22:"RETURN",26:"IGUAL",27:"INT",28:"DOUBLE",29:"STRING",30:"CHAR",31:"BOOLEAN",32:"COMA",33:"WRITELINE",34:"PARA",35:"PARC",36:"IF",37:"LLAVA",38:"LLAVC",39:"ELSE",40:"WHILE",41:"FOR",44:"SWITCH",48:"CASE",49:"DSPNTS",50:"DEFAULT",52:"VOID",55:"START",56:"WITH",57:"MAS",58:"MENOS",59:"MULTI",60:"DIV",61:"POT",62:"MOD",63:"MAYORIGUAL",64:"MAYORQUE",65:"MENORIGUAL",66:"MENORQUE",67:"IGUALIGUAL",68:"DIFERENTE",69:"AND",70:"OR",71:"NOT",72:"DECIMAL",73:"ENTERO",74:"CADENA",75:"CARACTER",76:"TRUE",77:"FALSE",78:"INTERROGACION"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,3],[6,3],[6,2],[6,1],[6,2],[6,2],[6,3],[7,5],[7,3],[24,1],[24,1],[24,1],[24,1],[24,1],[25,3],[25,1],[8,5],[9,4],[10,7],[10,11],[10,9],[11,7],[15,11],[42,4],[42,3],[43,2],[43,2],[43,3],[14,7],[14,8],[14,7],[45,2],[45,1],[47,4],[46,3],[20,8],[20,7],[20,8],[20,7],[51,4],[51,2],[21,4],[21,3],[53,3],[53,1],[54,6],[54,5],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,2],[23,3],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,5],[23,2],[23,2],[23,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = new ast.default($$[$0-1]); return this.$ 
break;
case 2: case 43:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: case 27: case 44: case 56:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 4:
 this.$ =  $$[$0]; 
break;
case 5: case 6: case 7: case 8: case 10: case 11: case 15: case 86:
 this.$ = $$[$0]; 
break;
case 9:
 this.$ = new detener.default(); 
break;
case 12:
 this.$ = new asignacion.default($$[$0-2], new aritmetica.default(new identificador.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].last_column), '-', new primitivo.default(1, 'ENTERO', _$[$0-2].first_line, _$[$0-2].last_column), _$[$0-2].first_line, _$[$0-2].last_column, false),_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 13:
 this.$ = new asignacion.default($$[$0-2], new aritmetica.default(new identificador.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].last_column), '+', new primitivo.default(1, 'ENTERO', _$[$0-2].first_line, _$[$0-2].last_column), _$[$0-2].first_line, _$[$0-2].last_column, false),_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 14:
 this.$ = new continuar.default(); 
break;
case 16: case 75:
 this.$ = $$[$0-1]; 
break;
case 17:
 this.$ = new retorno.default(null); 
break;
case 18:
 this.$ = new retorno.default($$[$0-1]); 
break;
case 19:
 this.$ = new declaracion.default($$[$0-4], $$[$0-3], $$[$0-1],  _$[$0-4].first_line, _$[$0-4].last_column);
break;
case 20:
 this.$ = new declaracion.default($$[$0-2], $$[$0-1], null,  _$[$0-2].first_line, _$[$0-2].last_column);
break;
case 21:
this.$ = new tipo.default("ENTERO"); 
break;
case 22:
this.$ = new tipo.default("DOBLE"); 
break;
case 23:
this.$ = new tipo.default("CADENA"); 
break;
case 24:
this.$ = new tipo.default("CARACTER"); 
break;
case 25:
this.$ = new tipo.default("BOOLEANO"); 
break;
case 26: case 55:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 28:
 this.$ = new writeline.default($$[$0-2], _$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 29:
 this.$ = new asignacion.default($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 30:
 this.$ = new Ifs.default($$[$0-4], $$[$0-1], [], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 31:
 this.$ = new Ifs.default($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10].first_line, _$[$0-10].last_column); 
break;
case 32:
 this.$ = new Ifs.default($$[$0-6], $$[$0-3], [$$[$0]], _$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 33:
 this.$ = new While.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column);  
break;
case 34:
 this.$ = new For.default($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].last_column); 
break;
case 35:
 this.$ = new declaracion.default($$[$0-3], $$[$0-2], $$[$0],  _$[$0-3].first_line, _$[$0-3].last_column);
break;
case 36: case 39:
 this.$ = new asignacion.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 37:
 this.$ = new asignacion.default($$[$0-1], new aritmetica.default(new identificador.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), '-', new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false),_$[$0-1].first_line, _$[$0-1].last_column ); 
break;
case 38:
 this.$ = new asignacion.default($$[$0-1], new aritmetica.default(new identificador.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), '+', new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false),_$[$0-1].first_line, _$[$0-1].last_column ); 
break;
case 40:
 this.$ = new Switch.default($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 41:
 this.$ = new Switch.default($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 42:
 this.$ = new Switch.default($$[$0-4], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 45:
 this.$ = new caso.default($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 46:
 this.$ = new caso.default(null, $$[$0], _$[$0-2].first_line, _$[$0-2].last_column);
break;
case 47:
 this.$ = new funcion.default(2, $$[$0-7], $$[$0-6], $$[$0-4], false, $$[$0-1],  _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 48:
 this.$ = new funcion.default(2, $$[$0-6], $$[$0-5], [], false, $$[$0],  _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 49:
 this.$ = new funcion.default(3, $$[$0-7], $$[$0-6], $$[$0-4], true, $$[$0-1],  _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 50:
 this.$ = new funcion.default(3, $$[$0-6], $$[$0-5], [], true, $$[$0],  _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 51:
 this.$ = $$[$0-3]; this.$.push(new simbolo.default(6, $$[$0-1], $$[$0], null)); 
break;
case 52:
 this.$ = new Array(); this.$.push(new simbolo.default(6, $$[$0-1], $$[$0], null)); 
break;
case 53:
this.$ = new llamada.default($$[$0-3], $$[$0-1],_$[$0-3].first_line, _$[$0-3].last_column ); 
break;
case 54:
this.$ = new llamada.default($$[$0-2], [] ,_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 59:
 this.$ = new aritmetica.default($$[$0-2], '+', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 60:
 this.$ = new aritmetica.default($$[$0-2], '-', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 61:
 this.$ = new aritmetica.default($$[$0-2], '*', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 62:
 this.$ = new aritmetica.default($$[$0-2], '/', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 63:
 this.$ = new aritmetica.default($$[$0-2], '^', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 64:
 this.$ = new aritmetica.default($$[$0-2], '%', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 65:
 this.$ = new relacional.default($$[$0-2], '>=', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 66:
 this.$ = new relacional.default($$[$0-2], '>', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 67:
 this.$ = new relacional.default($$[$0-2], '<=', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 68:
 this.$ = new relacional.default($$[$0-2], '<', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 69:
 this.$ = new relacional.default($$[$0-2], '==', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 70:
 this.$ = new relacional.default($$[$0-2], '!=', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 71:
 this.$ = new logica.default($$[$0-2], '&&', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 72:
 this.$ = new logica.default($$[$0-2], '||', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 73:
 this.$ = new logica.default($$[$0], '!', null, _$[$0-1].first_line, _$[$0-1].last_column,true); 
break;
case 74:
 this.$ = new aritmetica.default($$[$0], 'UNARIO', null, _$[$0-1].first_line, _$[$0-1].last_column,true); 
break;
case 76:
 this.$ = new primitivo.default(Number($$[$0]), 'DOBLE', _$[$0].first_line, _$[$0].last_column); 
break;
case 77:
 this.$ = new primitivo.default(Number($$[$0]), 'ENTERO', _$[$0].first_line, _$[$0].last_column); 
break;
case 78:
 this.$ = new identificador.default($$[$0], _$[$0].first_line, _$[$0].last_column); 
break;
case 79:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], 'CADENA', _$[$0].first_line, _$[$0].last_column); 
break;
case 80:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], 'CARACTER', _$[$0].first_line, _$[$0].last_column); 
break;
case 81:
 this.$ = new primitivo.default(true, 'BOOLEANO', _$[$0].first_line, _$[$0].last_column); 
break;
case 82:
 this.$ = new primitivo.default(false, 'BOOLEANO', _$[$0].first_line, _$[$0].last_column); 
break;
case 83:
 this.$ = new ternario.default($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 84:
 this.$ = new aritmetica.default(new identificador.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), '+', new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false); 
break;
case 85:
 this.$ = new aritmetica.default(new identificador.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), '-', new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,21:15,22:$V3,24:17,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,33:$V9,36:$Va,40:$Vb,41:$Vc,44:$Vd,52:$Ve},{1:[3]},{5:[1,29],6:30,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,21:15,22:$V3,24:17,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,33:$V9,36:$Va,40:$Vb,41:$Vc,44:$Vd,52:$Ve},o($Vf,[2,3]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),{13:[1,31]},o($Vf,[2,10]),o($Vf,[2,11]),{17:[1,32],18:[1,33],26:[1,34],34:$Vg},{13:[1,36]},o($Vf,[2,15]),{13:[1,37]},{13:[1,38],16:$Vh,21:50,23:39,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:[1,52],25:51},{34:[1,53]},{34:[1,54]},{34:[1,55]},{34:[1,56]},{34:[1,57]},{16:[1,58]},{16:[2,21]},{16:[2,22]},{16:[2,23]},{16:[2,24]},{16:[2,25]},{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,9]),{13:[1,59]},{13:[1,60]},{16:$Vh,21:50,23:61,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:$Vh,21:50,23:64,34:$Vi,35:[1,63],53:62,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},o($Vf,[2,14]),o($Vf,[2,16]),o($Vf,[2,17]),{13:[1,65],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,78:$VF},{16:$Vh,21:50,23:81,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:$Vh,21:50,23:82,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:$Vh,21:50,23:83,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},o($VG,[2,76]),o($VG,[2,77]),o($VG,[2,78],{17:[1,85],18:[1,84],34:$Vg}),o($VG,[2,79]),o($VG,[2,80]),o($VG,[2,81]),o($VG,[2,82]),o($VG,[2,86]),{13:[1,87],26:[1,86],32:[1,88]},o($VH,[2,27],{34:[1,89]}),{16:$Vh,21:50,23:90,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:$Vh,21:50,23:91,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:$Vh,21:50,23:92,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:$Vh,21:50,23:93,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:[1,96],24:95,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,42:94},{34:[1,97]},o($Vf,[2,12]),o($Vf,[2,13]),{13:[1,98],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,78:$VF},{32:[1,100],35:[1,99]},o($VG,[2,54]),o($VI,[2,56],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,78:$VF}),o($Vf,[2,18]),{16:$Vh,21:50,23:101,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:$Vh,21:50,23:102,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:$Vh,21:50,23:103,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:$Vh,21:50,23:104,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:$Vh,21:50,23:105,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:$Vh,21:50,23:106,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:$Vh,21:50,23:107,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:$Vh,21:50,23:108,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:$Vh,21:50,23:109,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:$Vh,21:50,23:110,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:$Vh,21:50,23:111,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:$Vh,21:50,23:112,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:$Vh,21:50,23:113,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:$Vh,21:50,23:114,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:$Vh,21:50,23:115,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},o($VJ,[2,73],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC}),o($VG,[2,74]),{35:[1,116],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,78:$VF},o($VG,[2,84]),o($VG,[2,85]),{16:$Vh,21:50,23:117,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},o($Vf,[2,20]),{16:[1,118]},{24:121,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,35:[1,120],51:119},{35:[1,122],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,78:$VF},{35:[1,123],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,78:$VF},{35:[1,124],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,78:$VF},{35:[1,125],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,78:$VF},{13:[1,126]},{16:[1,127]},{26:[1,128]},{24:121,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,35:[1,130],51:129},o($Vf,[2,29]),o($VG,[2,53]),{16:$Vh,21:50,23:131,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},o($VK,[2,59],{59:$Vt,60:$Vu,61:$Vv,62:$Vw}),o($VK,[2,60],{59:$Vt,60:$Vu,61:$Vv,62:$Vw}),o($VL,[2,61],{61:$Vv,62:$Vw}),o($VL,[2,62],{61:$Vv,62:$Vw}),o($VM,[2,63],{62:$Vw}),o($VM,[2,64],{62:$Vw}),o($VN,[2,65],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw}),o($VN,[2,66],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw}),o($VN,[2,67],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw}),o($VN,[2,68],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw}),o($VN,[2,69],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw}),o($VN,[2,70],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw}),o($VJ,[2,71],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC}),o([13,32,35,49,70,78],[2,72],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD}),{49:[1,132],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,78:$VF},o($VG,[2,75]),{13:[1,133],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,78:$VF},o($VH,[2,26]),{32:$VO,35:[1,134]},{37:[1,136]},{16:[1,137]},{13:[1,138]},{37:[1,139]},{37:[1,140]},{37:[1,141]},{16:$Vh,21:50,23:142,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{26:[1,143]},{16:$Vh,21:50,23:144,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{32:$VO,35:[1,145]},{37:[1,146]},o($VI,[2,55],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,78:$VF}),{16:$Vh,21:50,23:147,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},o($Vf,[2,19]),{37:[1,148]},{24:149,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8},{4:150,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,21:15,22:$V3,24:17,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,33:$V9,36:$Va,40:$Vb,41:$Vc,44:$Vd,52:$Ve},o($VI,[2,52]),o($Vf,[2,28]),{4:151,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,21:15,22:$V3,24:17,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,33:$V9,36:$Va,40:$Vb,41:$Vc,44:$Vd,52:$Ve},{4:152,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,21:15,22:$V3,24:17,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,33:$V9,36:$Va,40:$Vb,41:$Vc,44:$Vd,52:$Ve},{45:153,46:154,47:155,48:$VP,50:$VQ},{13:[1,158],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,78:$VF},{16:$Vh,21:50,23:159,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{13:[2,36],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,78:$VF},{37:[1,160]},{4:161,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,21:15,22:$V3,24:17,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,33:$V9,36:$Va,40:$Vb,41:$Vc,44:$Vd,52:$Ve},o([13,32,35,49],[2,83],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,78:$VF}),{4:162,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,21:15,22:$V3,24:17,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,33:$V9,36:$Va,40:$Vb,41:$Vc,44:$Vd,52:$Ve},{16:[1,163]},{6:30,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,21:15,22:$V3,24:17,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,33:$V9,36:$Va,38:[1,164],40:$Vb,41:$Vc,44:$Vd,52:$Ve},{6:30,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,21:15,22:$V3,24:17,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,33:$V9,36:$Va,38:[1,165],40:$Vb,41:$Vc,44:$Vd,52:$Ve},{6:30,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,21:15,22:$V3,24:17,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,33:$V9,36:$Va,38:[1,166],40:$Vb,41:$Vc,44:$Vd,52:$Ve},{38:[1,167],46:168,47:169,48:$VP,50:$VQ},{38:[1,170]},o($VR,[2,44]),{49:[1,171]},{16:$Vh,21:50,23:172,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:[1,174],43:173},{13:[2,35],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,78:$VF},{4:175,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,21:15,22:$V3,24:17,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,33:$V9,36:$Va,40:$Vb,41:$Vc,44:$Vd,52:$Ve},{6:30,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,21:15,22:$V3,24:17,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,33:$V9,36:$Va,38:[1,176],40:$Vb,41:$Vc,44:$Vd,52:$Ve},{6:30,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,21:15,22:$V3,24:17,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,33:$V9,36:$Va,38:[1,177],40:$Vb,41:$Vc,44:$Vd,52:$Ve},o($VI,[2,51]),o($Vf,[2,48]),o($Vf,[2,30],{39:[1,178]}),o($Vf,[2,33]),o($Vf,[2,40]),{38:[1,179]},o($VR,[2,43]),o($Vf,[2,42]),{4:180,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,21:15,22:$V3,24:17,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,33:$V9,36:$Va,40:$Vb,41:$Vc,44:$Vd,52:$Ve},{49:[1,181],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,78:$VF},{35:[1,182]},{17:[1,183],18:[1,184],26:[1,185]},{6:30,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,21:15,22:$V3,24:17,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,33:$V9,36:$Va,38:[1,186],40:$Vb,41:$Vc,44:$Vd,52:$Ve},o($Vf,[2,50]),o($Vf,[2,47]),{10:188,36:$Va,37:[1,187]},o($Vf,[2,41]),{6:30,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,21:15,22:$V3,24:17,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,33:$V9,36:$Va,38:[2,46],40:$Vb,41:$Vc,44:$Vd,52:$Ve},{4:189,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,21:15,22:$V3,24:17,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,33:$V9,36:$Va,40:$Vb,41:$Vc,44:$Vd,52:$Ve},{37:[1,190]},{35:[2,37]},{35:[2,38]},{16:$Vh,21:50,23:191,34:$Vi,58:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},o($Vf,[2,49]),{4:192,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,21:15,22:$V3,24:17,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,33:$V9,36:$Va,40:$Vb,41:$Vc,44:$Vd,52:$Ve},o($Vf,[2,32]),o($VR,[2,45],{7:4,8:5,9:6,10:7,11:8,14:10,15:11,20:14,21:15,24:17,6:30,12:$V0,16:$V1,19:$V2,22:$V3,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,33:$V9,36:$Va,40:$Vb,41:$Vc,44:$Vd,52:$Ve}),{4:193,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,21:15,22:$V3,24:17,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,33:$V9,36:$Va,40:$Vb,41:$Vc,44:$Vd,52:$Ve},{35:[2,39],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,78:$VF},{6:30,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,21:15,22:$V3,24:17,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,33:$V9,36:$Va,38:[1,194],40:$Vb,41:$Vc,44:$Vd,52:$Ve},{6:30,7:4,8:5,9:6,10:7,11:8,12:$V0,14:10,15:11,16:$V1,19:$V2,20:14,21:15,22:$V3,24:17,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,33:$V9,36:$Va,38:[1,195],40:$Vb,41:$Vc,44:$Vd,52:$Ve},o($Vf,[2,31]),o($Vf,[2,34])],
defaultActions: {24:[2,21],25:[2,22],26:[2,23],27:[2,24],28:[2,25],29:[2,1],183:[2,37],184:[2,38]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const evaluar = require('../Interprete/Evaluar');
    const aritmetica = require('../Interprete/Expresiones/Operaciones/Aritmetica');
    const primitivo = require('../Interprete/Expresiones/Primitivo');

    const writeline = require('../Interprete/Instrucciones/WriteLine')
    const declaracion = require('../Interprete/Instrucciones/Declaracion')
    const ast = require('../Interprete/Ast/Ast')
    const tipo = require('../Interprete/TablaSimbolos/Tipo')
    const identificador = require('../Interprete/Expresiones/Identificador')

    const relacional = require('../Interprete/Expresiones/Operaciones/Relacional');
    const logica = require('../Interprete/Expresiones/Operaciones/Logica');

    const asignacion = require('../Interprete/Instrucciones/Asignacion');
    const Ifs = require('../Interprete/Instrucciones/SentenciasControl/Ifs');
    const While = require('../Interprete/Instrucciones/SentenciasCiclica/While');
    const ternario = require('../Interprete/Expresiones/Ternario');
    const detener = require('../Interprete/Instrucciones/SentenciasTransferencia/Break');

    const Switch = require('../Interprete/Instrucciones/SentenciasControl/Switch');
    const caso = require('../Interprete/Instrucciones/SentenciasControl/Caso'); 
    const For = require('../Interprete/Instrucciones/SentenciasCiclica/For');

    const continuar = require('../Interprete/Instrucciones/SentenciasTransferencia/Continue');

     const funcion = require('../Interprete/Instrucciones/Funcion');
     const llamada = require('../Interprete/Instrucciones/Llamada');
     const startwith = require('../Interprete/Instrucciones/StartWith');
      const simbolo = require('../Interprete/TablaSimbolos/Simbolo')
      const retorno = require('../Interprete/Instrucciones/SentenciasTransferencia/Return');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Ignoramos los comentarios simples*/
break;
case 1:/*Ignorar comentarios con multiples lneas*/
break;
case 2: console.log("Reconocio : " + yy_.yytext);  return 17 
break;
case 3: console.log("Reconocio : " + yy_.yytext);  return 18 
break;
case 4: console.log("Reconocio : " + yy_.yytext);  return 67 
break;
case 5: console.log("Reconocio : " + yy_.yytext);  return 61 
break;
case 6: console.log("Reconocio : " + yy_.yytext);  return 71 
break;
case 7: console.log("Reconocio : " + yy_.yytext);  return 62 
break;
case 8: console.log("Reconocio : " + yy_.yytext);  return 34 
break;
case 9: console.log("Reconocio : " + yy_.yytext);  return 35 
break;
case 10: console.log("Reconocio : " + yy_.yytext);  return 'CORA' 
break;
case 11: console.log("Reconocio : " + yy_.yytext);  return 'CORC' 
break;
case 12: console.log("Reconocio : " + yy_.yytext);  return 13 
break;
case 13: console.log("Reconocio : " + yy_.yytext);  return 26 
break;
case 14: console.log("Reconocio : " + yy_.yytext);  return 32 
break;
case 15: console.log("Reconocio : "+ yy_.yytext); return 37
break;
case 16: console.log("Reconocio : "+ yy_.yytext); return 38
break;
case 17: console.log("Reconocio : "+ yy_.yytext); return 78
break;
case 18: console.log("Reconocio : "+ yy_.yytext); return 49
break;
case 19: console.log("Reconocio : " + yy_.yytext);  return 57 
break;
case 20: console.log("Reconocio : " + yy_.yytext);  return 59 
break;
case 21: console.log("Reconocio : " + yy_.yytext);  return 60 
break;
case 22: console.log("Reconocio : " + yy_.yytext);  return 58 
break;
case 23: console.log("Reconocio : " + yy_.yytext);  return 62 
break;
case 24: console.log("Reconocio : " + yy_.yytext);  return 61 
break;
case 25: console.log("Reconocio : " + yy_.yytext);  return 63 
break;
case 26: console.log("Reconocio : " + yy_.yytext);  return 64 
break;
case 27: console.log("Reconocio : " + yy_.yytext);  return 65 
break;
case 28: console.log("Reconocio : " + yy_.yytext);  return 66 
break;
case 29: console.log("Reconocio : " + yy_.yytext);  return 68 
break;
case 30: console.log("Reconocio : " + yy_.yytext);  return 69 
break;
case 31: console.log("Reconocio : " + yy_.yytext);  return 70 
break;
case 32: console.log("Reconocio : " + yy_.yytext);  return 71 
break;
case 33: console.log("Reconocio : " + yy_.yytext);  return 'EVALUAR' 
break;
case 34: console.log("Reconocio : " + yy_.yytext);  return 76 
break;
case 35: console.log("Reconocio : " + yy_.yytext);  return 77 
break;
case 36: console.log("Reconocio : " + yy_.yytext);  return 27 
break;
case 37: console.log("Reconocio : " + yy_.yytext);  return 28 
break;
case 38: console.log("Reconocio : " + yy_.yytext);  return 29 
break;
case 39: console.log("Reconocio : " + yy_.yytext);  return 30 
break;
case 40: console.log("Reconocio : " + yy_.yytext);  return 31 
break;
case 41: console.log("Reconocio : " + yy_.yytext);  return 33 
break;
case 42: console.log("Reconocio : "+ yy_.yytext); return 36
break;
case 43: console.log("Reconocio : "+ yy_.yytext); return 40
break;
case 44: console.log("Reconocio : "+ yy_.yytext); return 39
break;
case 45: console.log("Reconocio : "+ yy_.yytext); return 12
break;
case 46: console.log("Reconocio : "+ yy_.yytext); return 41
break;
case 47: console.log("Reconocio : "+ yy_.yytext); return 44
break;
case 48: console.log("Reconocio : "+ yy_.yytext); return 48
break;
case 49: console.log("Reconocio : "+ yy_.yytext); return 'TOSTRING'
break;
case 50: console.log("Reconocio : "+ yy_.yytext); return 'TOUPPER'
break;
case 51: console.log("Reconocio : "+ yy_.yytext); return 50
break;
case 52: console.log("Reconocio : "+ yy_.yytext); return 19
break;
case 53: console.log("Reconocio : "+ yy_.yytext); return 55
break;
case 54: console.log("Reconocio : "+ yy_.yytext); return 56
break;
case 55: console.log("Reconocio : "+ yy_.yytext); return 52
break;
case 56: console.log("Reconocio : "+ yy_.yytext); return 22
break;
case 57: console.log("Reconocio : " + yy_.yytext);  return 72 
break;
case 58: console.log("Reconocio : " + yy_.yytext);  return 73 
break;
case 59: console.log("Reconocio : " + yy_.yytext);  return 16 
break;
case 60: console.log("Reconocio : " + yy_.yytext);  return 74 
break;
case 61: console.log("Reconocio : " + yy_.yytext);  return 75 
break;
case 62:/* Espacios se ignoran */
break;
case 63:return 5
break;
case 64:return 'ERROR'
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/i,/^(?:--)/i,/^(?:\+\+)/i,/^(?:==)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:=)/i,/^(?:,)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\?)/i,/^(?::)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:evaluar\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:writeline\b)/i,/^(?:if\b)/i,/^(?:while\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:tostring\b)/i,/^(?:toupper\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:start\b)/i,/^(?:with\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:([0-9]+))/i,/^(?:([a-zñA-ZÑ][a-zñA-ZÑ0-9_]*))/i,/^(?:(("((\\([\'\"\\ntr]))|([^\"\\]))*")))/i,/^(?:(('((\\([\'\"\\ntr]))|([^\'\\]))')))/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = interprete;
exports.Parser = interprete.Parser;
exports.parse = function () { return interprete.parse.apply(interprete, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}